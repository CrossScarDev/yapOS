Binary files original/images/SystemUpdate/update-charge.pdi and src/images/SystemUpdate/update-charge.pdi differ
Binary files original/images/SystemUpdate/update-charging.pdi and src/images/SystemUpdate/update-charging.pdi differ
Binary files original/images/SystemUpdate/update-checking.pdi and src/images/SystemUpdate/update-checking.pdi differ
Binary files original/images/SystemUpdate/update-downloading.pdi and src/images/SystemUpdate/update-downloading.pdi differ
Binary files original/images/SystemUpdate/update-unpacking.pdi and src/images/SystemUpdate/update-unpacking.pdi differ
diff -ruN original/pdxinfo src/pdxinfo
--- original/pdxinfo	2025-03-16 11:33:05.976030514 -0700
+++ src/pdxinfo	2025-03-16 13:16:21.626459519 -0700
@@ -1,7 +1,7 @@
-name=Settings
-author=Panic Inc.
-description=Settings
+name=yapOS Settings
+author=CrossScar
+description=Patched version of PlaydateOS Settings.
 bundleID=com.panic.settings
 imagePath=LauncherAssets/
+version=0.2.1
 pdxversion=20601
-buildtime=785877031
diff -ruN original/settingsview.lua src/settingsview.lua
--- original/settingsview.lua	2025-03-16 11:33:05.976430333 -0700
+++ src/settingsview.lua	2025-03-16 11:41:26.269407075 -0700
@@ -10,6 +10,7 @@
 import("timezone/timeview")
 import("system/systemview")
 import("wifi/wifiview")
+import("yapOS/mainview")
 import("utility")
 SettingsView = {}
 local menu, controller
@@ -50,6 +51,10 @@
 	stopKeyRepeatTimer()
 	controller.pushView(LockscreenView, "Lock Screen", nil, kHeaderImageLockscreen)
 end
+local yaposAction = function()
+	stopKeyRepeatTimer()
+	controller.pushView(YapOSView, "yapOS", nil, kHeaderImageAlt)
+end
 local updateAutoLockRow
 local autoLockAction = function()
 	stopKeyRepeatTimer()
@@ -78,6 +83,7 @@
 kMenuTitleNotificationLight = "Notification Light"
 kMenuTitleAccessibility = "Accessibility"
 kMenuTitleSystem = "System"
+kMenuTitleYapOS = "yapOS"
 local chevronImage = chevronImage
 local menuTitles = {
 	kMenuTitleGames,
@@ -88,18 +94,20 @@
 	kMenuTitleNotificationLight,
 	kMenuTitleAccessibility,
 	kMenuTitleTime,
-	kMenuTitleSystem
+	kMenuTitleSystem,
+	kMenuTitleYapOS,
 }
 local menuSubTitles = {
-	{chevronImage},
-	{chevronImage},
-	{chevronImage},
-	{chevronImage},
+	{ chevronImage },
+	{ chevronImage },
+	{ chevronImage },
+	{ chevronImage },
 	{},
-	{chevronImage},
-	{chevronImage},
+	{ chevronImage },
+	{ chevronImage },
 	{},
-	{chevronImage}
+	{ chevronImage },
+	{ chevronImage },
 }
 local menuActions = {
 	gamesAction,
@@ -110,7 +118,8 @@
 	notificationLightAction,
 	accessibilityAction,
 	timezoneAction,
-	systemAction
+	systemAction,
+	yaposAction,
 }
 local kMenuRowGames = 1
 local kMenuRowAccount = 2
@@ -121,6 +130,7 @@
 local kMenuRowAccessibility = 7
 local kMenuRowTime = 8
 local kMenuRowSystem = 9
+local kMenuRowYapOS = 10
 function SettingsView:initWithController(c)
 	controller = c
 	menu = Menu.new()
@@ -149,11 +159,11 @@
 		refreshDataOnce = true
 	end
 	if Registration.isRegistered() then
-		menu:setSubtitleAtIndex(kMenuRowAccount, {"\226\128\166", chevronImage})
+		menu:setSubtitleAtIndex(kMenuRowAccount, { "\226\128\166", chevronImage })
 		Registration.getAccountInfo(function(info, error, cached)
 			if nil ~= info and nil ~= info.username then
 				local name = info.username
-				menu:setSubtitleAtIndex(kMenuRowAccount, {name, chevronImage})
+				menu:setSubtitleAtIndex(kMenuRowAccount, { name, chevronImage })
 			elseif false == cached then
 				if Registration.isRegistered() then
 					local info = Registration.getCachedAccountInfo()
@@ -161,11 +171,11 @@
 					if nil ~= info and nil ~= info.username then
 						name = info.username
 					end
-					menu:setSubtitleAtIndex(kMenuRowAccount, {name, chevronImage})
+					menu:setSubtitleAtIndex(kMenuRowAccount, { name, chevronImage })
 				else
 					menu:setSubtitleAtIndex(kMenuRowAccount, {
 						"Not Registered",
-						chevronImage
+						chevronImage,
 					})
 				end
 			end
@@ -174,7 +184,7 @@
 	else
 		menu:setSubtitleAtIndex(kMenuRowAccount, {
 			"Not Registered",
-			chevronImage
+			chevronImage,
 		})
 	end
 end
@@ -186,23 +196,23 @@
 	if #ssids > 0 then
 		menu:setSubtitleAtIndex(kMenuRowWifi, {
 			ssids[1],
-			chevronImage
+			chevronImage,
 		})
 	else
 		menu:setSubtitleAtIndex(kMenuRowWifi, {
 			"Not Configured",
-			chevronImage
+			chevronImage,
 		})
 	end
 end
 function SettingsView:viewWillAppear()
 	updateWifiStatus()
 	local style = LockscreenView.currentLockscreenStyle()
-	menu:setSubtitleAtIndex(kMenuRowLockscreen, {style, chevronImage})
+	menu:setSubtitleAtIndex(kMenuRowLockscreen, { style, chevronImage })
 	local _, desc = playdate.system.getTimezoneOffset()
 	menu:setSubtitleAtIndex(kMenuRowTime, {
 		currentTimeString(),
-		chevronImage
+		chevronImage,
 	})
 	updateAutoLockRow()
 end
@@ -226,7 +236,7 @@
 		currentMinutes = date.minute
 		menu:setSubtitleAtIndex(kMenuRowTime, {
 			currentTimeString(),
-			chevronImage
+			chevronImage,
 		})
 	end
 	if menu:needsDisplay() or x ~= lastX then
@@ -240,8 +250,7 @@
 function SettingsView.AButtonUp()
 	menu:actionButtonUp()
 end
-function SettingsView.BButtonDown()
-end
+function SettingsView.BButtonDown() end
 function SettingsView.BButtonUp()
 	playdate.exit()
 end
@@ -263,14 +272,10 @@
 function SettingsView.downButtonUp()
 	stopKeyRepeatTimer()
 end
-function SettingsView.leftButtonDown()
-end
-function SettingsView.leftButtonUp()
-end
-function SettingsView.rightButtonDown()
-end
-function SettingsView.rightButtonUp()
-end
+function SettingsView.leftButtonDown() end
+function SettingsView.leftButtonUp() end
+function SettingsView.rightButtonDown() end
+function SettingsView.rightButtonUp() end
 function SettingsView.crankClickUp()
 	menu:selectPrev()
 end
diff -ruN original/system/systemupdateview.lua src/system/systemupdateview.lua
--- original/system/systemupdateview.lua	2025-03-16 11:33:05.976030514 -0700
+++ src/system/systemupdateview.lua	1969-12-31 16:00:00.000000000 -0800
@@ -1,218 +0,0 @@
-import("progressbar")
-import("Server/registration")
-local gfx = playdate.graphics
-local geom = playdate.geometry
-SystemUpdateView = {}
-local CheckingBg, DownloadingBg, UnpackingBg, ChargeBg, ChargingBg, controller, progressBar, backgroundImage
-local drawBackground = false
-local fwupStatusString = ""
-local sendUserBack = false
-local locked = false
-local updateInfo
-local accountSetupRequested = false
-local waitForCharge = false
-local MIN_UPDATE_CHARGE = 25
-local setBackgroundImage = function(image)
-	if image ~= backgroundImage then
-		backgroundImage = image
-		drawBackground = true
-	end
-end
-function SystemUpdateView:deviceWillLock()
-	if locked then
-		playdate.system.abortDeviceLock()
-		controller.shakeScreen()
-	end
-end
-local statusString = function(str)
-	if nil == updateInfo then
-		updateInfo = playdate.server.availableFirmware()
-	end
-	if nil ~= updateInfo.version then
-		return str .. " " .. updateInfo.version
-	else
-		return str .. "\226\128\166"
-	end
-end
-local rebootAndApplyFirmwareUpdate = function()
-	if playdate.server.applyFirmwareUpdate() == false then
-		locked = false
-		sendUserBack = true
-		fwupStatusString = "Error: Couldn't apply update"
-		progressBar:setVisible(false)
-		drawBackground = true
-	end
-end
-local updateFirmwareCb = function(newStatus, progressbytes, totalbytes, errorMessage)
-	if nil ~= progressBar then
-		progressBar:setProgress(progressbytes, totalbytes)
-	end
-	if "idle" == newStatus then
-		fwupStatusString = "Aborted, something went wrong."
-		locked = false
-		progressBar:setVisible(false)
-	elseif "accounterror" == newStatus then
-		fwupStatusString = "Account error."
-		locked = false
-		progressBar:setVisible(false)
-		drawBackground = true
-	elseif "error" == newStatus then
-		fwupStatusString = "Error: " .. errorMessage
-		locked = false
-		sendUserBack = true
-		progressBar:setVisible(false)
-		drawBackground = true
-	elseif "nowifi" == newStatus then
-		fwupStatusString = "Wi-Fi not available."
-		locked = false
-		progressBar:setVisible(false)
-		drawBackground = true
-		sendUserBack = true
-	elseif "noupdate" == newStatus then
-		fwupStatusString = "You're up to date."
-		locked = false
-		progressBar:setVisible(false)
-	elseif "downloading" == newStatus then
-		fwupStatusString = statusString("Downloading")
-		locked = true
-		setBackgroundImage(DownloadingBg)
-		progressBar:setVisible(true)
-	elseif "unpacking" == newStatus then
-		fwupStatusString = statusString("Unpacking")
-		locked = true
-		setBackgroundImage(UnpackingBg)
-		progressBar:setVisible(true)
-	elseif "ready" == newStatus then
-		locked = false
-		progressBar:setVisible(false)
-		if playdate.getBatteryPercentage() >= MIN_UPDATE_CHARGE then
-			rebootAndApplyFirmwareUpdate()
-		else
-			waitForCharge = true
-			local power = playdate.getPowerStatus()
-			if power.charging then
-				setBackgroundImage(ChargingBg)
-			else
-				setBackgroundImage(ChargeBg)
-			end
-		end
-	end
-end
-function SystemUpdateView:initWithController(c)
-	controller = c
-	CheckingBg = gfx.image.new("images/SystemUpdate/update-checking")
-	DownloadingBg = gfx.image.new("images/SystemUpdate/update-downloading")
-	UnpackingBg = gfx.image.new("images/SystemUpdate/update-unpacking")
-	ChargeBg = gfx.image.new("images/SystemUpdate/update-charge")
-	ChargingBg = gfx.image.new("images/SystemUpdate/update-charging")
-	locked = true
-	waitForCharge = false
-	accountSetupRequested = false
-	setBackgroundImage(CheckingBg)
-	progressBar = ProgressBar.new()
-	progressBar:setVisible(false)
-end
-function pushAccountView()
-	playdate.setCollectsGarbage(true)
-	controller.pushView(AccountView, "Account", nil, kHeaderImageAccount)
-end
-function startDownload(message)
-	playdate.setAutoLockDisabled(true)
-	updateInfo = nil
-	if Registration.getRegistrationState() == Registration.state.kRegistered then
-		fwupStatusString = message
-		playdate.server.updateFirmware(updateFirmwareCb)
-	elseif true == accountSetupRequested then
-		fwupStatusString = "Press \226\146\182 to set up account"
-		locked = false
-	else
-		accountSetupRequested = true
-		playdate.timer.performAfterDelay(0, pushAccountView)
-	end
-	playdate.setCollectsGarbage(false)
-end
-function SystemUpdateView:viewDidAppear()
-	startDownload("Checking for update\226\128\166")
-end
-function SystemUpdateView:deinit()
-	playdate.setCollectsGarbage(true)
-	updateInfo = nil
-	controller = nil
-	progressBar = nil
-	sendUserBack = nil
-	fwupStatusString = ""
-	playdate.setAutoLockDisabled(false)
-end
-function SystemUpdateView:draw(x, y, w, h)
-	if backgroundImage == CheckingBg or drawBackground then
-		backgroundImage:draw(x, y)
-		drawBackground = false
-	end
-	gfx.setFont(gfx.getUIFont())
-	local text_y
-	if progressBar:visible() then
-		text_y = 175
-		progressBar:draw(x + 100, y + 155, 200, 10)
-	else
-		text_y = 200
-	end
-	if sendUserBack then
-		gfx.drawTextAligned(fwupStatusString, x + 200, text_y - 18, kTextAlignment.center)
-		gfx.drawTextAligned("Press \226\146\183 to go back", x + 200, text_y + 10, kTextAlignment.center)
-	elseif waitForCharge then
-		local percent = math.floor(playdate.getBatteryPercentage())
-		local power = playdate.getPowerStatus()
-		if power.charging then
-			msg = "Charging to " .. MIN_UPDATE_CHARGE .. "%"
-			setBackgroundImage(ChargingBg)
-		else
-			msg = "Please plug in to resume update"
-			setBackgroundImage(ChargeBg)
-		end
-		gfx.fillRect(x, text_y - 14, w - 38, 400 - (text_y - 14))
-		gfx.drawTextAligned(msg, x + 200, text_y - 14, kTextAlignment.center)
-		gfx.drawTextAligned("Press \226\146\183 to cancel update", x + 200, text_y + 10, kTextAlignment.center)
-		if percent >= MIN_UPDATE_CHARGE then
-			rebootAndApplyFirmwareUpdate()
-		end
-	else
-		gfx.drawTextAligned(fwupStatusString, x + 200, text_y, kTextAlignment.center)
-	end
-end
-function SystemUpdateView.AButtonDown()
-end
-function SystemUpdateView.AButtonUp()
-	if accountSetupRequested and Registration.getRegistrationState() ~= Registration.state.kRegistered then
-		accountSetupRequested = true
-		playdate.timer.performAfterDelay(0, pushAccountView)
-	end
-end
-function SystemUpdateView.BButtonDown()
-end
-function SystemUpdateView.BButtonUp()
-	if not locked then
-		controller.popView()
-	else
-		controller.shakeScreen()
-	end
-end
-function SystemUpdateView.upButtonDown()
-end
-function SystemUpdateView.upButtonUp()
-end
-function SystemUpdateView.downButtonDown()
-end
-function SystemUpdateView.downButtonUp()
-end
-function SystemUpdateView.leftButtonDown()
-end
-function SystemUpdateView.leftButtonUp()
-end
-function SystemUpdateView.rightButtonDown()
-end
-function SystemUpdateView.rightButtonUp()
-end
-function SystemUpdateView.crankClickUp()
-end
-function SystemUpdateView.crankClickDown()
-end
diff -ruN original/system/systemview.lua src/system/systemview.lua
--- original/system/systemview.lua	2025-03-16 11:33:05.976030514 -0700
+++ src/system/systemview.lua	2025-03-16 11:42:58.493818287 -0700
@@ -3,11 +3,9 @@
 import("system/deviceinfoview")
 import("system/factoryresetview")
 import("system/regulatoryview")
-import("system/systemupdateview")
 import("system/diagnosticview")
 import("images/sharedImages")
 import("devicemetricsview")
-local gfx = playdate.graphics
 SystemView = {}
 local menu, controller, diagnosticfile, keyRepeatTimer
 local stopKeyRepeatTimer = function()
@@ -27,10 +25,6 @@
 	stopKeyRepeatTimer()
 	controller.pushView(FactoryResetView, "Factory Reset", nil, kHeaderImageReset)
 end
-local systemUpdateAction = function()
-	stopKeyRepeatTimer()
-	controller.pushView(SystemUpdateView, "System Update", nil, kHeaderImageSystemUpdate)
-end
 local restartAction = function()
 	Alert.show("Restart", [[
 Are you sure you
@@ -69,7 +63,6 @@
 end
 kMenuTitleDeviceInfo = "Device Info"
 kMenuTitleFactoryReset = "Factory Reset"
-kMenuTitleSystemUpdates = "System Update"
 kMenuTitleDeviceMetrics = "Device Metrics"
 kMenuTitleRestartDevice = "Restart Playdate"
 kMenuTitleRestartToDataDisk = "Reboot to Data Disk"
@@ -78,7 +71,6 @@
 kMenuTitleDiagnostics = "Diagnostics"
 local menuTitles = {
 	kMenuTitleDeviceInfo,
-	kMenuTitleSystemUpdates,
 	kMenuTitleDeviceMetrics,
 	kMenuTitleRegulatory,
 	kMenuTitleRestartDevice,
@@ -92,9 +84,6 @@
 	{
 		chevronImage
 	},
-	{
-		chevronImage
-	},
 	{},
 	{
 		chevronImage
@@ -108,7 +97,6 @@
 }
 local menuActions = {
 	deviceInfoAction,
-	systemUpdateAction,
 	deviceMetricsAction,
 	regulatoryAction,
 	restartAction,
diff -ruN original/yapOS/mainview.lua src/yapOS/mainview.lua
--- original/yapOS/mainview.lua	1969-12-31 16:00:00.000000000 -0800
+++ src/yapOS/mainview.lua	2025-03-16 12:04:29.903697306 -0700
@@ -0,0 +1,80 @@
+import("menu")
+import("alert")
+import("images/sharedImages")
+import("yapOS/themeview")
+YapOSView = {}
+local menu, controller, keyRepeatTimer
+local stopKeyRepeatTimer = function()
+	if nil ~= keyRepeatTimer then
+		keyRepeatTimer:remove()
+		keyRepeatTimer = nil
+	end
+end
+function YapOSView:deviceWillLock()
+	stopKeyRepeatTimer()
+end
+function ThemeAction()
+	stopKeyRepeatTimer()
+	controller.pushView(ThemeView, "Theme", nil, kHeaderImageDevice)
+end
+function YapOSView:initWithController(c)
+	menu = Menu.new()
+	controller = c
+	local menuTitles = {
+		"Theme",
+	}
+	local menuSubTitles = {
+		{ chevronImage },
+	}
+	local menuActions = {
+		ThemeAction,
+	}
+	menu:setMenuTitlesAndActions(menuTitles, menuSubTitles, menuActions)
+end
+function YapOSView:viewWillAppear() end
+function YapOSView:deinit()
+	stopKeyRepeatTimer()
+	menu = nil
+	controller = nil
+end
+function YapOSView:draw(x, y, w, h)
+	menu:drawmenu(x, y, w, h)
+end
+function YapOSView.AButtonDown()
+	menu:actionButtonDown()
+end
+function YapOSView.AButtonUp()
+	menu:actionButtonUp()
+end
+function YapOSView.BButtonDown() end
+function YapOSView.BButtonUp()
+	controller.popView()
+end
+function YapOSView.upButtonDown()
+	stopKeyRepeatTimer()
+	keyRepeatTimer = playdate.timer.keyRepeatTimerWithDelay(300, 100, function()
+		menu:selectPrev()
+	end)
+end
+function YapOSView.upButtonUp()
+	stopKeyRepeatTimer()
+end
+function YapOSView.downButtonDown()
+	stopKeyRepeatTimer()
+	keyRepeatTimer = playdate.timer.keyRepeatTimerWithDelay(300, 100, function()
+		menu:selectNext()
+	end)
+end
+function YapOSView.downButtonUp()
+	stopKeyRepeatTimer()
+end
+function YapOSView.leftButtonDown() end
+function YapOSView.leftButtonUp() end
+function YapOSView.rightButtonDown() end
+function YapOSView.rightButtonUp() end
+function YapOSView.crankClickUp()
+	menu:selectPrev()
+end
+function YapOSView.crankClickDown()
+	menu:selectNext()
+end
diff -ruN original/yapOS/themeview.lua src/yapOS/themeview.lua
--- original/yapOS/themeview.lua	1969-12-31 16:00:00.000000000 -0800
+++ src/yapOS/themeview.lua	2025-03-16 12:05:24.119705361 -0700
@@ -0,0 +1,124 @@
+import("menu")
+import("alert")
+import("images/sharedImages")
+ThemeView = {}
+local menu, controller, keyRepeatTimer
+local stopKeyRepeatTimer = function()
+	if nil ~= keyRepeatTimer then
+		keyRepeatTimer:remove()
+		keyRepeatTimer = nil
+	end
+end
+function ThemeView:deviceWillLock()
+	stopKeyRepeatTimer()
+end
+local boolToDisplay = function(dark)
+	if dark then
+		return "Dark"
+	else
+		return "Light"
+	end
+end
+local boolToRowNumber = function(dark)
+	if dark then
+		return 1
+	else
+		return 2
+	end
+end
+function ThemeView.currentTheme()
+	return boolToDisplay(playdate.datastore.read("/System/Data/yapOS").dark)
+end
+local setTheme = function(newTheme)
+	local newSelection = boolToRowNumber(newTheme)
+	local currentTheme = playdate.datastore.read("/System/Data/yapOS").dark
+	local currentSelection = boolToRowNumber(currentTheme)
+	if currentSelection ~= newSelection then
+		menu:setSubtitleAtIndex(currentSelection, nil)
+		menu:setSubtitleAtIndex(newSelection, checkImage)
+		playdate.datastore.write({ ["dark"] = newTheme }, "/System/Data/yapOS")
+		currentSelection = newSelection
+	end
+end
+local DarkAction = function()
+	setTheme(true)
+end
+local LightAction = function()
+	setTheme(false)
+end
+function ThemeView:initWithController(c)
+	menu = Menu.new()
+	controller = c
+	local kMenuTitleDark = boolToDisplay(true)
+	local kMenuTitleLight = boolToDisplay(false)
+	local menuTitles = {
+		kMenuTitleDark,
+		kMenuTitleLight,
+	}
+	local menuSubTitles = {
+		{},
+		{},
+	}
+	local menuActions = {
+		DarkAction,
+		LightAction,
+	}
+	menu:setMenuTitlesAndActions(menuTitles, menuSubTitles, menuActions)
+end
+function ThemeView:viewWillAppear()
+	local theme = playdate.datastore.read("/System/Data/yapOS").dark
+	local selectedRow = boolToRowNumber(theme)
+	for i = 1, menu:getNumberOfRows() do
+		if i == selectedRow then
+			menu:setSubtitleAtIndex(i, checkImage)
+		else
+			menu:setSubtitleAtIndex(i, nil)
+		end
+	end
+end
+function ThemeView:deinit()
+	stopKeyRepeatTimer()
+	menu = nil
+	controller = nil
+end
+function ThemeView:draw(x, y, w, h)
+	menu:drawmenu(x, y, w, h)
+end
+function ThemeView.AButtonDown()
+	menu:actionButtonDown()
+end
+function ThemeView.AButtonUp()
+	menu:actionButtonUp()
+end
+function ThemeView.BButtonDown() end
+function ThemeView.BButtonUp()
+	controller.popView()
+end
+function ThemeView.upButtonDown()
+	stopKeyRepeatTimer()
+	keyRepeatTimer = playdate.timer.keyRepeatTimerWithDelay(300, 100, function()
+		menu:selectPrev()
+	end)
+end
+function ThemeView.upButtonUp()
+	stopKeyRepeatTimer()
+end
+function ThemeView.downButtonDown()
+	stopKeyRepeatTimer()
+	keyRepeatTimer = playdate.timer.keyRepeatTimerWithDelay(300, 100, function()
+		menu:selectNext()
+	end)
+end
+function ThemeView.downButtonUp()
+	stopKeyRepeatTimer()
+end
+function ThemeView.leftButtonDown() end
+function ThemeView.leftButtonUp() end
+function ThemeView.rightButtonDown() end
+function ThemeView.rightButtonUp() end
+function ThemeView.crankClickUp()
+	menu:selectPrev()
+end
+function ThemeView.crankClickDown()
+	menu:selectNext()
+end
